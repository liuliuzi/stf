{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"a",
				"append"
			],
			[
				"ma",
				"main\tmain"
			]
		]
	},
	"buffers":
	[
		{
			"file": "cmd/stf-apiserver/app/server.go",
			"settings":
			{
				"buffer_size": 967,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "pkg/api.go",
			"settings":
			{
				"buffer_size": 437,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "pkg/node/node.go",
			"settings":
			{
				"buffer_size": 173,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "package node\nimport (\n\t\"net/http\"\n\t\"github.com/emicklei/go-restful\"\n\t\"fmt\"\n\t\"github.com/liuliuzi/stf/pkg\"\n\t\"golang.org/x/net/context\"\n\t\"strings\"\n\t//\"encoding/json\"\n\t//\"github.com/bitly/go-simplejson\"\n\t//\"github.com/emicklei/go-restful/swagger\"\n)\n\ntype NodeService struct {\n\t// normally one would use DAO (data access object)\n\tNodes map[string]Node\n\tApiRuntime   *pkg.ApiRuntime\n\tPrefix       string\n}\n\nfunc (u NodeService) Init(){\n\tu.Prefix=\"/stf/node/\"\n\tfmt.Println(u.Prefix)\n}\n\nfunc (u NodeService) Register() {\n\tws := new(restful.WebService)\n\tws.\n\t\tPath(\"/nodes\").\n\t\tConsumes(restful.MIME_JSON).\n\t\tProduces(restful.MIME_JSON) // you can specify this per route as well\n\tws.Route(ws.GET(\"/\").To(u.findAllNodes))\n\tws.Route(ws.GET(\"/{Node-id}\").To(u.findNode)) // on the response\n\tws.Route(ws.PUT(\"/{Node-id}\").To(u.updateNode)) // from the request\n\tws.Route(ws.POST(\"/\").To(u.createNode)) // from the request\n\tws.Route(ws.DELETE(\"/{Node-id}\").To(u.removeNode))\n\trestful.Add(ws)\n}\n\nfunc (u NodeService) findAllNodes(request *restful.Request, response *restful.Response) {\n\tfmt.Println(\"findAllNodes\")\n\tvalue, _ := u.storageGetKey()\n\tret:=\"[\"\n\tfor _, key := range value {\n            fmt.Println( key)\n            ret=ret+'\"'+key+'\":{'\n            key=strings.Replace(key,u.Prefix,\"\",20)\n            value, _ := u.storageGet(key)\n            //fmt.Println (value)\n            ret=ret+value+'}'\n\n        }\n    ret=ret+\"]\"\n\n\tresponse.WriteEntity(ret)\n}\n\n\nfunc (u NodeService) findNode(request *restful.Request, response *restful.Response) {\n\tid := request.PathParameter(\"Node-id\")\n\tvalue, err := u.storageGet(id)\n\tif err != nil {\n\t    fmt.Println(err)\n\t}else{\n\t    fmt.Println(value)\n\t}\n\n\tif len(value) == 0 {\n\t\tresponse.WriteErrorString(http.StatusNotFound, \"Node could not be found.\")\n\t} else {\n\t\tfmt.Println(\"findNode\")\n\t\tresponse.WriteEntity(value)\n\t}\n}\n\nfunc (u *NodeService) updateNode(request *restful.Request, response *restful.Response) {\n\tnod := new(Node)\n\terr := request.ReadEntity(&nod)\n\tif err == nil {\n\t\tu.storageUpdate(nod.Id,nod.String())\n\t\tfmt.Println(\"updateNode\")\n\t\tresponse.WriteEntity(nod)\n\t} else {\n\t\tresponse.WriteError(http.StatusInternalServerError, err)\n\t}\n}\n\n\nfunc (u *NodeService) createNode(request *restful.Request, response *restful.Response) {\n\n\tnod := new(Node)\n\terr := request.ReadEntity(&nod)\n\tif err == nil {\n\t\t//u.storageSet(nod.Id,nod)\n\t\tu.storageSet(nod.Id,nod.String())\n\t\t//u.storageSet(nod.Id,{'Id':'123566666','Name':'liu'})\n\n\t\t//u.storageSet(nod.Id,kk)\n\t\tresponse.WriteHeaderAndEntity(http.StatusCreated, nod)\n\t} else {\n\t\tresponse.WriteError(http.StatusInternalServerError, err)\n\t}\n}\n\nfunc (u *NodeService) removeNode(request *restful.Request, response *restful.Response) {\n\tid := request.PathParameter(\"Node-id\")\n\tu.storageDelete(id)\n\tfmt.Println(\"removeNode\")\n}\n\nfunc (u *NodeService) storageSet(key string , value string ) error {\n\tresp, err := u.ApiRuntime.Etcdclient.Set(context.Background(), u.Prefix+key, value, nil)\n    if err != nil {\n    \tfmt.Println(\"storageSet failed\")\n        fmt.Println(err)\n    }else{\n    \tfmt.Println(\"storageSet success\")\n    \tfmt.Println(resp)\n    }\n    return err\n}\n\nfunc (u *NodeService) storageGetKey() ([]string ,error) {\n\tresp, err := u.ApiRuntime.Etcdclient.Get(context.Background(), u.Prefix, nil)\n    if err != nil {\n    \tfmt.Println(\"storageGetKey failed\")\n        fmt.Println(err)\n        return nil,err\n    }else{\n    \tret:=[]string{}\n    \tfmt.Println(\"storageGetKey success\")\n    \tfor _, node := range resp.Node.Nodes {\n            fmt.Println( node)\n            ret=append(ret,node.Key)\n        }\n\n        return ret,nil\n\n    }\n}\n\nfunc (u *NodeService) storageGet(key string ) (string ,error) {\n\tfmt.Println(\"storageGet\", key)\n\tresp, err := u.ApiRuntime.Etcdclient.Get(context.Background(), u.Prefix+key, nil)\n    if err != nil {\n    \tfmt.Println(\"storageGet failed\")\n        fmt.Println(err)\n    }else{\n    \tfmt.Println(\"storageGet success\")\n    \tfmt.Println(resp)\n    }\n    return resp.Node.Value,err\n}\nfunc (u *NodeService) storageUpdate(key string , value string ) (string ,error) {\n\tresp, err := u.ApiRuntime.Etcdclient.Update(context.Background(), u.Prefix+key,value)\n    if err != nil {\n    \tfmt.Println(\"storageUpdate failed\")\n        fmt.Println(err)\n    }else{\n    \tfmt.Println(\"storageUpdate success\")\n    \tfmt.Println(resp)\n    }\n    return resp.Node.Value,err\n}\nfunc (u *NodeService) storageDelete(key string ) error {\n\tresp, err := u.ApiRuntime.Etcdclient.Delete(context.Background(), u.Prefix+key, nil)\n    if err != nil {\n    \tfmt.Println(\"storageDelete failed\")\n        fmt.Println(err)\n        return err\n    }else{\n    \tfmt.Println(\"storageDelete success\")\n    \tfmt.Println(resp)\n    \treturn nil\n    }\n    \n}\n\n",
			"file": "pkg/node/nodeapi.go",
			"file_size": 4881,
			"file_write_time": 131261710653947362,
			"settings":
			{
				"buffer_size": 4717,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "cmd/stf-apiserver/apiserver.go",
			"settings":
			{
				"buffer_size": 623,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/D/study/go/etcd/etcdtest.go",
			"settings":
			{
				"buffer_size": 1815,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: pc",
				"Package Control: List Packages"
			],
			[
				"ssp",
				"Set Syntax: Python"
			],
			[
				"ss",
				"Set Syntax: PHP"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/study/go/stf",
		"/D/study/go/stf/cmd",
		"/D/study/go/stf/cmd/stf-agent",
		"/D/study/go/stf/cmd/stf-apiserver",
		"/D/study/go/stf/cmd/stf-apiserver/app",
		"/D/study/go/stf/cmd/stf-apiserver/app/options",
		"/D/study/go/stf/cmd/stf-controller-manger",
		"/D/study/go/stf/pkg",
		"/D/study/go/stf/pkg/node",
		"/D/study/go/stf/pkg/util",
		"/D/study/go/stf/pkg/util/runtime",
		"/D/study/go/stf/pkg/util/wait"
	],
	"file_history":
	[
		"/D/study/go/stf - Copy/pkg/node.go",
		"/D/userdata/yaotliu/Application Data/Sublime Text 3/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/D/study/go/etcd/etcdtest.go",
		"/D/study/go/stf/pkg/etcdclient.go",
		"/D/study/go/stf/src/pkg/api.go",
		"/D/study/go/stf/src/pkg/node.go",
		"/D/study/go/stf/cmd/stf-apiserver/apiserver.go",
		"/D/study/go/stf/pkg/util/logs.go",
		"/D/study/go/stf/pkg/util/wait/wait.go",
		"/D/study/go/stf/cmd/goenv.sh",
		"/D/study/go/stf/pkg/user/userapi",
		"/D/study/go/stf/pkg/user/user",
		"/D/study/go/stf/src/pkg/runtime/runtime.go",
		"/D/study/go/stf/src/pkg/waiter/wait.go",
		"/D/study/go/smart_test/src/pkg/util/logs.go",
		"/D/study/go/smart_test/pkg/test.go",
		"/D/study/go/smart_test/pkg/tt/test1.go",
		"/D/study/go/smart_test/src/pkg/runtime/runtime.go",
		"/D/study/go/smart_test/src/pkg/waiter/wait.go",
		"/D/userdata/yaotliu/Application Data/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/D/study/go/smart_test/src/pkg/etcdclient.go",
		"/D/study/go/smart_test/src/pkg/api.go",
		"/D/study/go/smart_test/src/pkg/node.go",
		"/D/study/go/smart_test/cmd/goenv.sh",
		"/D/study/go/smart_test/cmd/stf-apiserver/apiserver.go",
		"/D/study/go/smart_test/cmd/env.sh",
		"/D/study/go/smart_test/pkg/node.go",
		"/D/study/go/smart_test/cmd/stf-apiserver/app/options/options.go",
		"/D/study/go/smart_test/cmd/stf-apiserver/app/apiserver.go",
		"/D/study/go/smart_test/cmd/stf-apiserver/app/server.go",
		"/D/study/go/goexample/variadic-functions.go",
		"/D/study/go/goexample/maps.go",
		"/D/study/go/goexample/slices.go",
		"/D/study/go/goexample/arrays.go",
		"/D/study/go/goexample/switch.go",
		"/D/study/go_opensource/shadowsocks-go-master/shadowsocks/util.go",
		"/D/study/go_opensource/shadowsocks-go-master/cmd/shadowsocks-httpget/httpget.go",
		"/D/study/go_opensource/shadowsocks-go-master/cmd/shadowsocks-server/server.go",
		"/D/study/go_opensource/shadowsocks-go-master/shadowsocks/encrypt.go",
		"/D/study/go_opensource/shadowsocks-go-master/shadowsocks/config.go",
		"/D/study/go_opensource/shadowsocks-go-master/shadowsocks/pipe.go",
		"/D/study/go_opensource/shadowsocks-go-master/cmd/shadowsocks-local/local.go",
		"/D/userdata/yaotliu/Desktop/openstack.py",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/dns/dns_test.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kube-apiserver/apiserver.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kube-apiserver/app/server.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/client/cache/reflector.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/master/master.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/registry/namespace/etcd/etcd.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/dns/dns.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kube-controller-manager/app/controllermanager.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kubelet/kubelet.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kube-controller-manager/app/options/options.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kubelet/app/options/options.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/kubelet/client/kubelet_client.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kubelet/app/server.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/kubelet/kubelet.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kube-controller-manager/controller-manager.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/labels/selector.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/vendor/k8s.io/heapster/metrics/apis/metrics/v1alpha1/types.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/apis/autoscaling/v1/generated.proto",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/kubelet/pod/manager.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/util/wait/wait.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kubelet/app/server_linux.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/kubelet/types/pod_update.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/api/types.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/libs/go2idl/client-gen/testoutput/clientset_generated/test_internalclientset/clientset.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/kubelet/cadvisor/cadvisor_linux.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/kubelet/runonce.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/kubelet/cm/container_manager_linux.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kube-dns/app/server.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kube-dns/dns.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/controller/replication/replication_controller.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/hyperkube/hyperkube.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/cmd/kubectl/app/kubectl.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/pkg/genericapiserver/default_storage_factory_builder.go",
		"/D/work/Docker/kubernetes-1.3.0-alpha.5/vendor/google.golang.org/api/cloudmonitoring/v2beta2/cloudmonitoring-gen.go"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
			"D:\\study\\go\\stf"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"usr",
			"user",
			"User",
			"Users",
			"UserService",
			"liuyaoting.io",
			"github.com",
			"liuyaoting.io",
			"users",
			"userapi",
			"smf",
			"Method string,Path string,queryValues url.Values",
			"\t",
			"apiruntime",
			"NewRuntime",
			"println",
			"syncLoopIteration",
			"initializeModules",
			"Run",
			"KubeletBootstrap",
			"err",
			"Interface",
			"podController",
			"rcController",
			"Reflector",
			"func(r *Reflector) Run()",
			"run",
			"kubeletClient",
			"kubeletclient",
			"BuildDefaultStorageFactory",
			"NewDefaultResourceEncodingConfig",
			"ssssdsadasdasdasdasd",
			"aa"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"nod",
			"Node",
			"Nodes",
			"NodeService",
			"github.com/liuliuzi",
			"stf",
			"r *http.Request",
			"    ",
			"        ",
			"    ",
			"Println"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "cmd/stf-apiserver/app/server.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 967,
						"regions":
						{
						},
						"selection":
						[
							[
								430,
								443
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										443,
										444
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										429,
										430
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "pkg/api.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 437,
						"regions":
						{
						},
						"selection":
						[
							[
								361,
								361
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										366,
										367
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										274,
										275
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Go/Go.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "pkg/node/node.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 173,
						"regions":
						{
						},
						"selection":
						[
							[
								12,
								12
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Go/Go.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "pkg/node/nodeapi.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4717,
						"regions":
						{
						},
						"selection":
						[
							[
								1390,
								1390
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1390,
										1391
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										1388,
										1389
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "cmd/stf-apiserver/apiserver.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 623,
						"regions":
						{
						},
						"selection":
						[
							[
								623,
								623
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										622,
										623
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										270,
										271
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Go/Go.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/D/study/go/etcd/etcdtest.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1815,
						"regions":
						{
						},
						"selection":
						[
							[
								678,
								678
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1565,
										1566
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										139,
										140
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"syntax": "Packages/Go/Go.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 300.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "smart_test.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"D:\\work\\Docker\\docker-0.1.0\\docker-0.1.0.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 201.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
